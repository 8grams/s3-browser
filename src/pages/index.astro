---
import Layout from '../layouts/Layout.astro';
import { listObjects } from '../utils/s3';
import { requireAuth } from '../middleware/auth';
import type { S3Object, S3CommonPrefix } from '../utils/s3';

// Check authentication
const authResponse = requireAuth(Astro.request);
if (authResponse) return authResponse;

const bucket = import.meta.env.DEFAULT_BUCKET;
const prefix = Astro.url.searchParams.get('prefix') || '';
const searchQuery = Astro.url.searchParams.get('search') || '';
const nextToken = Astro.url.searchParams.get('next') || null;
const pageSize = 20; // Items per page

let files: S3Object[] = [];
let folders: S3CommonPrefix[] = [];
let error: string | null = null;
let newNextToken: string | null = null;

if (!bucket) {
  return new Response('Default bucket not configured', { status: 500 });
}

try {
  // If there's a search query, use it as a prefix for S3 search
  const searchPrefix = searchQuery ? `${prefix}${searchQuery}` : prefix;
  const result = await listObjects(bucket, searchPrefix, nextToken || undefined, pageSize);
  files = result.files;
  folders = result.folders;
  newNextToken = result.nextContinuationToken;
} catch (e) {
  error = e instanceof Error ? e.message : 'An unknown error occurred';
  return new Response(error, { status: 500 });
}
---

<Layout title="S3 Browser">
  <div class="container mx-auto p-4">
    <div class="flex justify-between items-center mb-6">
      <div>
        <h1 class="text-3xl font-bold">S3 Browser</h1>
        <p class="text-sm text-gray-500">Bucket: {bucket}</p>
      </div>
      <form action="/api/logout" method="POST">
        <button type="submit" class="btn btn-ghost">Logout</button>
      </form>
    </div>

    <!-- Error Handling -->
    {error ? (
      <div class="alert alert-error">
        <span>{error}</span>
      </div>
    ) : (
      <div>
        <!-- Breadcrumb -->
        <div class="text-sm breadcrumbs mb-4">
          <ul>
            <li><a href="/">Root</a></li>
            {prefix.split('/').filter(Boolean).map((part, index, array) => (
              <li>
                <a href={`/?prefix=${encodeURIComponent(array.slice(0, index + 1).join('/'))}/`}>
                  {part}
                </a>
              </li>
            ))}
          </ul>
        </div>

        <!-- Search Bar -->
        <form class="form-control mb-6" action="/" method="GET">
          <input type="hidden" name="prefix" value={prefix} />
          <div class="input-group">
            <input 
              type="text" 
              name="search"
              placeholder="Search files and folders..." 
              class="input input-bordered w-full"
              value={searchQuery}
            />
            <button type="submit" class="btn btn-square">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
              </svg>
            </button>
          </div>
        </form>

        <!-- Folders -->
        {folders.length > 0 && (
          <div class="mb-8">
            <h2 class="text-xl font-semibold mb-4">Folders</h2>
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              {folders.map((folder) => (
                <a 
                  href={`/?prefix=${encodeURIComponent(folder.Prefix)}`}
                  class="card bg-base-100 shadow-xl hover:shadow-2xl transition-shadow"
                >
                  <div class="card-body">
                    <h3 class="card-title">
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-6l-2-2H5a2 2 0 00-2 2z" />
                      </svg>
                      {folder.Prefix.split('/').slice(-2, -1)[0]}
                    </h3>
                  </div>
                </a>
              ))}
            </div>
          </div>
        )}

        <!-- Files -->
        {files.length > 0 && (
          <div>
            <h2 class="text-xl font-semibold mb-4">Files</h2>
            <div class="overflow-x-auto">
              <table class="table w-full">
                <thead>
                  <tr>
                    <th>Name</th>
                    <th>Size</th>
                    <th>Last Modified</th>
                    <th>Actions</th>
                  </tr>
                </thead>
                <tbody>
                  {files.map((file) => (
                    <tr>
                      <td>{file.Key.split('/').pop()}</td>
                      <td>{(file.Size / 1024).toFixed(2)} KB</td>
                      <td>{new Date(file.LastModified).toLocaleString()}</td>
                      <td>
                        <a 
                          href={`/api/download?key=${encodeURIComponent(file.Key)}`}
                          class="btn btn-sm btn-primary"
                          target="_blank"
                        >
                          Download
                        </a>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>

            <!-- Pagination -->
            <div class="flex justify-center mt-4 gap-2">
              {nextToken && (
                <a 
                  href={`/?prefix=${encodeURIComponent(prefix)}&search=${encodeURIComponent(searchQuery)}`}
                  class="btn btn-sm"
                >
                  Previous
                </a>
              )}
              {newNextToken && (
                <a 
                  href={`/?prefix=${encodeURIComponent(prefix)}&search=${encodeURIComponent(searchQuery)}&next=${encodeURIComponent(newNextToken)}`}
                  class="btn btn-sm"
                >
                  Next
                </a>
              )}
            </div>
          </div>
        )}

        {folders.length === 0 && files.length === 0 && (
          <div class="alert alert-info">
            <span>No items found matching your search.</span>
          </div>
        )}
      </div>
    )}
  </div>
</Layout>