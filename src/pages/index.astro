---
import Layout from '../layouts/Layout.astro';
import { listObjects } from '../utils/s3';
import { requireAuth } from '../middleware/auth';
import type { S3Object } from '../utils/s3';
import type { S3CommonPrefix } from '../utils/s3';

// Check authentication
const authResponse = requireAuth(Astro.request);
if (authResponse) return authResponse;

const bucket = import.meta.env.DEFAULT_BUCKET;
const prefix = Astro.url.searchParams.get('prefix') || '';

/** @type {import('../utils/s3').S3Object[]} */
let files: S3Object[] = [];
/** @type {import('../utils/s3').S3CommonPrefix[]} */
let folders: S3CommonPrefix[] = [];
/** @type {string | null} */
let error = null;

if (!bucket) {
  return new Response('Default bucket not configured', { status: 500 });
}

try {
  const result = await listObjects(bucket, prefix);
  files = result.files;
  folders = result.folders;
} catch (e) {
  error = e instanceof Error ? e.message : 'An unknown error occurred';
  return new Response(error, { status: 500 });
}
---

<Layout title="S3 Browser">
  <div class="container mx-auto p-4" x-data="{ prefix: '' }">
    <div class="flex justify-between items-center mb-6">
      <div>
        <h1 class="text-3xl font-bold">S3 Browser</h1>
        <p class="text-sm text-gray-500">Bucket: {bucket}</p>
      </div>
      <form action="/api/logout" method="POST">
        <button type="submit" class="btn btn-ghost">Logout</button>
      </form>
    </div>

    <!-- Content Area -->
    <div id="content">
      {error ? (
        <div class="alert alert-error">
          <span>{error}</span>
        </div>
      ) : (
        <div>
          <!-- Breadcrumb -->
          <div class="text-sm breadcrumbs mb-4">
            <ul>
              <li><a href="/">Root</a></li>
              {prefix.split('/').filter(Boolean).map((part, index, array) => (
                <li>
                  <a href={`/?prefix=${array.slice(0, index + 1).join('/')}`}>
                    {part}
                  </a>
                </li>
              ))}
            </ul>
          </div>

          <!-- Folders -->
          {folders.length > 0 && (
            <div class="mb-8">
              <h2 class="text-xl font-semibold mb-4">Folders</h2>
              <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                {folders.map((folder) => (
                  <a 
                    href={`/?prefix=${folder.Prefix}`}
                    class="card bg-base-100 shadow-xl hover:shadow-2xl transition-shadow"
                  >
                    <div class="card-body">
                      <h3 class="card-title">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-6l-2-2H5a2 2 0 00-2 2z" />
                        </svg>
                        {folder.Prefix.split('/').slice(-2, -1)[0]}
                      </h3>
                    </div>
                  </a>
                ))}
              </div>
            </div>
          )}

          <!-- Files -->
          {files.length > 0 && (
            <div>
              <h2 class="text-xl font-semibold mb-4">Files</h2>
              <div class="overflow-x-auto">
                <table class="table w-full">
                  <thead>
                    <tr>
                      <th>Name</th>
                      <th>Size</th>
                      <th>Last Modified</th>
                      <th>Actions</th>
                    </tr>
                  </thead>
                  <tbody>
                    {files.map((file) => (
                      <tr>
                        <td>{file.Key.split('/').pop()}</td>
                        <td>{(file.Size / 1024).toFixed(2)} KB</td>
                        <td>{new Date(file.LastModified).toLocaleString()}</td>
                        <td>
                          <a 
                            href={`/api/download?key=${file.Key}`}
                            class="btn btn-sm btn-primary"
                            target="_blank"
                          >
                            Download
                          </a>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </div>
          )}

          {folders.length === 0 && files.length === 0 && (
            <div class="alert alert-info">
              <span>No items found in this location.</span>
            </div>
          )}
        </div>
      )}
    </div>
  </div>
</Layout>

<script>
  // Initialize Alpine.js
  document.addEventListener('alpine:init', () => {
    window.Alpine.data('s3Browser', () => ({
      prefix: '',
    }));
  });
</script> 